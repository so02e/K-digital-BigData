bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList[1]")); df
busRouteId <- df$busRouteId
busRouteId
url <- paste("http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=", API_key, "&busRouteId=", busRouteId, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc); top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
# 구글 맵에 버스 위치 출력
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=gc)
Sys.sleep(2)
ggmap(map)
geocode('Seoul', source = 'google')
geocode('Seoul', source = 'google', output = 'latlona')
geocode(enc2utf8('서울'), source = 'google')
geocode(enc2utf8('서울'), source = 'google', output = 'latlona')
geocode(enc2utf8('서울&language=ko'), source = 'google', output = 'latlona')
station_list = c('시청역', '을지로입구역', '을지로3가역', '을지로4가역',
'동대문역사문화공원역', '신당역', '상왕십리역', '왕십리역', '한양대역',
'뚝섬역', '성수역', '건대입구역', '구의역', '강변역', '잠실나루역',
'잠실역', '신천역', '종합운동장역', '삼성역', '선릉역', '역삼역',
'강남역', '2호선 교대역', '서초역', '방배역', '사당역', '낙성대역',
'서울대입구역', '봉천역', '신림역', '신대방역', '구로디지털단지역',
'대림역', '신도림역', '문래역', '영등포구청역', '당산역', '합정역',
'홍대입구역', '신촌역', '이대역', '아현역', '충정로역')
station_df = data.frame(station_list)
station_df$station_list = enc2utf8(station_df$station_list)
station_lonlat = mutate_geocode(station_df, station_list, source = 'google')
station_lonlat
save(station_lonlat, file="station_lonlat.rda") # 두 번째 테스트부터는 저장했다가 읽자구요
seoul_lonlat = unlist(geocode('seoul', source = 'google'))
qmap('seoul', zoom = 11)
qmap(seoul_lonlat, zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map <- qmap('Seoul', zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map + geom_point(data = station_lonlat, aes(x = lon, y = lat), colour = 'green',
size = 4)
df <- read.csv("data/전국전기차충전소표준데이터.csv")
df
str(df)
head(df); View(df)
df_add <- df[,c(13, 17, 18)]
names(df_add) <- c("address", "lat", "lon")
View(df_add)
map_korea <- get_map(location="southKorea", zoom=7, maptype="roadmap")
map_korea <- get_map(location="southKorea", zoom=7, maptype="roadmap")
ggmap(map_korea)+geom_point(data=df_add, aes(x=lon, y=lat), alpha=0.5, size=2, color="red")
map_seoul <- get_map(location="seoul", zoom=11, maptype="roadmap")
map_seoul <- get_map(location="seoul", zoom=11, maptype="roadmap")
ggmap(map_seoul)+geom_point(data=df_add, aes(x=lon, y=lat), alpha=0.5, size=5, color="blue")
library(leaflet)
library(dplyr)
library(ggmap)
seoul_lonlat<-geocode("seoul")
seoul_lonlat
leaflet()
map0 <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map0
map1 <- map0 %>% addTiles()
map1
mk <- multi_lonlat
lon <- mk$lon
lat <- mk$lat
msg <- '<strong><a href="http://www.multicampus.co.kr" style="text-decoration:none" >멀티캠퍼스</a></strong><hr>우리가 공부하는 곳 ㅎㅎ'
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 16) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 5) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 1) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
content1 <- paste(sep = '<br/>',"<b><a href='https://www.seoul.go.kr/main/index.jsp'>서울시청</a></b>",'아름다운 서울','코로나 이겨냅시다!!')
map3<-leaflet() %>% addTiles() %>%  addPopups(126.97797, 37.56654, content1)
map3
wifi_data = read.csv('data/wifi_data.csv', encoding = 'utf-8')
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat=~lat, popup = ~div, color = ~telecom_color(div)) -> mymap
mymap
telecom_color = colorFactor('Set1', wifi_data$div)
telecom_color(wifi_data$div)
str(telecom_color)
mode(telecom_color)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat=~lat, popup = ~div, color = ~telecom_color(div)) -> mymap
mymap
leaflet() %>%
addTiles() %>%
setView( lng=lon, lat=lat, zoom = 6) %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012")
leaflet() %>%
addTiles() %>%
setView( lng=lon, lat=lat, zoom = 16) %>%
addProviderTiles("Esri.WorldImagery")
mymap
library(htmlwidgets)
saveWidget(mymap, file="output/mymap.html") # 저장 하는 법
url <- "http://www.airkorea.or.kr/web/pmRelay?itemCode=11008&pMENU_NO=109"
remDr$navigate(url)
webElem <- remDr$findElement(using = "css", "#dateDiv_1 > img")
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
# http://www.airkorea.or.kr/ : 한국환경공단 실시간 자료 조회
# 테이블을 한방에 읽어오자 : 동적페이지
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
url <- "http://www.airkorea.or.kr/web/pmRelay?itemCode=11008&pMENU_NO=109"
remDr$navigate(url)
webElem <- remDr$findElement(using = "css", "#dateDiv_1 > img")
webElem$clickElement()
Sys.sleep(1)
webElem <- remDr$findElement(using = "css", "#ui-datepicker-div > table > tbody > tr:nth-child(2) > td:nth-child(6) > a")
webElem$clickElement()
Sys.sleep(1)
webElem <- remDr$findElement(using = "css", "#cont_body > form > div > div > a:nth-child(1)")
webElem$clickElement()
Sys.sleep(3)
elem <- remDr$findElement(using="css", value=".st_1")
elemtxt <- elem$getElementAttribute("outerHTML")
elemtxt
elem_html <- htmlTreeParse(elemtxt, asText = TRUE, useInternalNodes = T, encoding="UTF-8")
elem_html
games_table <- readHTMLTable(elem_html, header = T, stringsAsFactors = FALSE)[[1]]
games_table
Sys.setlocale("LC_ALL", "English") # 영어만 있을 때는 오류가 난다.  한글이 깨져서..
games_table <- readHTMLTable(elem_html, header = T, stringsAsFactors = FALSE)[[1]]
games_table
car_cor <- cor(mtcars)
library(MASS)
str(cats)
?cats
head(cats)
plot(cats$Hwt ~ cats$Bwt, # y축 ~ x축
col="forestgreen", pch=19,
xlab="Body Weight (kg)", ylab="Heart Weight (g)",
main="Body Weight and Heart Weight of Cats")
cor(cats$Bwt, cats$Hwt)
with(cats, cor(Bwt, Hwt)) #어떤 셋이든 cat라는 set을 가지고 적용을 한다. 데이터 셋을 주는 것을 생략할 수 있다.
mtcars
str(mtcars)
head(mtcars)
car_cor <- cor(mtcars)
corrplot(car_cor)
corrplot(car_cor, type="lower", order="hclust", tl.srt=45)
library(corrplot)
corrplot(car_cor)
corrplot(car_cor, type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="ellipse", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="number", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="shade", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="color", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="pie", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="color", type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="color", addCoef.col="black", type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="color", addCoef.col="black", type="lower", diag=F, tl.srt=45)
library(psych)
pairs.panels(state.x77, bg="red", pch=21, hist.col="gold",
main="Correlation Plot of US States Data")
mtcars
pairs.panels(state.x77, bg="red", pch=21, hist.col="gold",
main="Correlation Plot of US States Data")
state.x77
corrplot(car_cor, method="ellipse", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="number", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="color", type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="number", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="pie", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="color", type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="color", addCoef.col="black", type="lower", order="hclust", tl.srt=45)
pairs.panels(state.x77, bg="red", pch=21, hist.col="gold",
main="Correlation Plot of US States Data")
cor.test(cats$Bwt, cats$Hwt)
with(cats, cor.test(Bwt, Hwt))
with(cats, cor.test(~ Bwt + Hwt))
corr.test(iris[-5])
# 만화 제목, 만화 요약, 만화 평점
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
text <- NULL; navercomic <- NULL
for(i in 1: 20) {
url <- paste(site, i, sep="")
text <- read_html(url)
# 만화 제목
node1 <- html_nodes(text, xpath=paste0('//h6/a/text()'))
node1 <- html_text(node1, trim=TRUE)
print(node1)
comicName <- node1
vcomicName <- comicName
# 만화 요약
node2 <- html_nodes(text, "div.summary")
node2 <- html_text(node2, trim=TRUE)
print(node2)
comicSummary <- node2
vcomicSummary <- comicSummary
# 만화 평점
node3 <- html_nodes(text, xpath=paste0('//div[2]/strong'))
node3 <- html_text(node3, trim=TRUE)
print(node3)
comicGrade <- node3
vcomicGrade <- comicGrade
page <- data.frame(comicName=vcomicName,comicSummary=vcomicSummary,comicGrade=vcomicGrade)
navercomic <- rbind(navercomic, page)
}
library(rvest)
library(xml2)
library(XML)
library(httr)
# 만화 제목, 만화 요약, 만화 평점
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
text <- NULL; navercomic <- NULL
# 만화 제목
node1 <- html_nodes(text, xpath=paste0('//h6/a/text()'))
node1 <- html_text(node1, trim=TRUE)
print(node1)
comicName <- node1
vcomicName <- comicName
# 만화 요약
node2 <- html_nodes(text, "div.summary")
node2 <- html_text(node2, trim=TRUE)
print(node2)
comicSummary <- node2
vcomicSummary <- comicSummary
# 만화 평점
node3 <- html_nodes(text, xpath=paste0('//div[2]/strong'))
node3 <- html_text(node3, trim=TRUE)
print(node3)
comicGrade <- node3
vcomicGrade <- comicGrade
page <- data.frame(comicName=vcomicName,comicSummary=vcomicSummary,comicGrade=vcomicGrade)
navercomic <- rbind(navercomic, page)
for(i in 1: 20) {
url <- paste(site, i, sep="")
text <- read_html(url)
# 만화 제목
node1 <- html_nodes(text, xpath=paste0('//h6/a/text()'))
node1 <- html_text(node1, trim=TRUE)
print(node1)
comicName <- node1
vcomicName <- comicName
# 만화 요약
node2 <- html_nodes(text, "div.summary")
node2 <- html_text(node2, trim=TRUE)
print(node2)
comicSummary <- node2
vcomicSummary <- comicSummary
# 만화 평점
node3 <- html_nodes(text, xpath=paste0('//div[2]/strong'))
node3 <- html_text(node3, trim=TRUE)
print(node3)
comicGrade <- node3
vcomicGrade <- comicGrade
page <- data.frame(comicName=vcomicName,comicSummary=vcomicSummary,comicGrade=vcomicGrade)
navercomic <- rbind(navercomic, page)
}
node1 <- html_nodes(text, xpath=paste0('//h6/a/text()'))
node1 <- html_text(node1, trim=TRUE)
print(node1)
for(i in 1: 20) {
url <- paste(site, i, sep="")
text <- read_html(url)
# 만화 제목
node1 <- html_nodes(text, xpath=paste0('//h6/a/text()'))
node1 <- html_text(node1, trim=TRUE)
print(node1)
comicName <- node1
vcomicName <- comicName
# 만화 요약
node2 <- html_nodes(text, "div.summary")
node2 <- html_text(node2, trim=TRUE)
print(node2)
comicSummary <- node2
vcomicSummary <- comicSummary
# 만화 평점
node3 <- html_nodes(text, xpath=paste0('//div[2]/strong'))
node3 <- html_text(node3, trim=TRUE)
print(node3)
comicGrade <- node3
vcomicGrade <- comicGrade
page <- data.frame(comicName=vcomicName,comicSummary=vcomicSummary,comicGrade=vcomicGrade)
navercomic <- rbind(navercomic, page)
}
plot(cars$speed,                        # x축 자료
cars$dist,                         # y축 자료
main='자동차 속도와 제동거리',     # 그래프 제목
xlab='속도',                       # x축 레이블
ylab='제동거리',                   # y축 레이블
)
library(treemap)                     # treemap 패키지 불러오기
data(GNI2014)                        # 데이터 불러오기
head(GNI2014)                        # 데이터 내용 보기
treemap(GNI2014,
index=c('continent','iso3'), # 계층 구조 설정(대륙-국가)
vSize='population',          # 타일의 크기
vColor='GNI',                # 타일의 컬러
type='value',                # 타일 컬러링 방법
bg.labels='yellow',          # 레이블의 배경색
title="World's GNI")         # 나무지도 제목
radarchart(ds,                           # 데이터프레임
pcol='dark green',            # 다각형 선의 색
pfcol=rgb(0.2,0.5,0.5,0.5),   # 다각형 내부 색
plwd=3,                       # 다각형 선의 두께
cglcol='grey',                # 거미줄의 색
cglty=1,                      # 거미줄의 타입
cglwd=0.8,                    # 거미줄의 두께
axistype=1,                   # 축의 레이블 타입
seg=4,                        # 축의 눈금 분할
axislabcol='grey',            # 축의 레이블 색
caxislabels=seq(0,100,25)     # 축의 레이블 값
)
library(fmsb)
radarchart(ds,                           # 데이터프레임
pcol='dark green',            # 다각형 선의 색
pfcol=rgb(0.2,0.5,0.5,0.5),   # 다각형 내부 색
plwd=3,                       # 다각형 선의 두께
cglcol='grey',                # 거미줄의 색
cglty=1,                      # 거미줄의 타입
cglwd=0.8,                    # 거미줄의 두께
axistype=1,                   # 축의 레이블 타입
seg=4,                        # 축의 눈금 분할
axislabcol='grey',            # 축의 레이블 색
caxislabels=seq(0,100,25)     # 축의 레이블 값
)
month <- c(1,2,3,4,5,6)
rain  <- c(55,50,45,50,60,70)
df <- data.frame(month,rain)           # 그래프를 작성할 대상 데이터
df
ggplot(df, aes(x=month,y=rain)) +      # 그래프를 작성할 데이터 지정
geom_bar(stat='identity',            # 막대그래프의 형태 지정
width=0.7,                  # 막대의 폭 지정
fill='steelblue')           # 막대의 색 지정
# [코드 12-7]에 이어서
ggplot(df, aes(x=month,y=rain)) +      # 그래프를 그릴 데이터 지정
geom_bar(stat='identity',            # 막대 높이는 y축에 해당하는 열의 값
width=0.7,                  # 막대의 폭 지정
fill='steelblue') +         # 막대의 색 지정
ggtitle('월별 강수량') +              # 그래프의 제목 지정
theme(plot.title = element_text(size=25, face='bold', colour='steelblue')) +
labs(x='월',y='강수량') +            # 그래프의 x, y축 레이블 지정
coord_flip()                         # 그래프를 가로 방향으로 출력
library(ggplot2)
ggplot(iris, aes(x=Petal.Length)) +    # 그래프를 그릴 데이터 지정
geom_histogram(binwidth =0.5)        # 히스토그램 작성
# 만화 요약
node2 <- html_nodes(text, "div.summary")
# 만화 제목, 만화 요약, 만화 평점
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
text <- NULL; navercomic <- NULL
for(i in 1: 20) {
url <- paste(site, i, sep="")
text <- read_html(url)
# 만화 제목
node1 <- html_nodes(text, xpath=paste0('//h6/a/text()'))
node1 <- html_text(node1, trim=TRUE)
print(node1)
comicName <- node1
vcomicName <- comicName
# 만화 요약
node2 <- html_nodes(text, "div.summary")
node2 <- html_text(node2, trim=TRUE)
print(node2)
comicSummary <- node2
vcomicSummary <- comicSummary
# 만화 평점
node3 <- html_nodes(text, xpath=paste0('//div[2]/strong'))
node3 <- html_text(node3, trim=TRUE)
print(node3)
comicGrade <- node3
vcomicGrade <- comicGrade
page <- data.frame(comicName=vcomicName,comicSummary=vcomicSummary,comicGrade=vcomicGrade)
navercomic <- rbind(navercomic, page)
}
View(navercomic)
write.csv(navercomic, "output/navercomic.csv")
1 +1
library(geojsonio)
final <- read.csv("output/그리드 전처리 완료/final3.csv")
final
final_data <- st_read('output/그리드 전처리 완료/analysis4_dataset_0524.geojson')
final_data <- st_read('output/그리드 전처리 완료/analysis4_dataset_0524.geojson')
final_data <- st_read('output/그리드 전처리 완료/analysis4_dataset_0524.geojson')
library(car)
library(corrplot)
library(lmtest)
library(sf)
library(tmap)
library(dplyr)
library(sp)
library(sf)
library(RANN)
library(spdep)
library(rgdal)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(gvlma)
library(car)
library(tidyr)
library(lmtest)
library(leaps)
library(ggplot2)
library(broom)
library(AER)
library(MASS)
library(rsq)
library(gridExtra)
library(spgwr)
library(spatialreg)
library(geojsonio)
library(car)
library(corrplot)
library(lmtest)
library(sf)
library(tmap)
library(dplyr)
library(sp)
library(sf)
library(RANN)
library(spdep)
library(rgdal)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(gvlma)
library(car)
library(tidyr)
library(lmtest)
library(leaps)
library(ggplot2)
library(broom)
library(AER)
library(MASS)
library(rsq)
library(gridExtra)
library(spgwr)
library(spatialreg)
library(geojsonio)
1+1
1+1
library(car)
library(corrplot)
library(lmtest)
library(sf)
library(tmap)
library(dplyr)
library(sp)
library(sf)
library(RANN)
library(spdep)
library(rgdal)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(gvlma)
library(car)
library(tidyr)
library(lmtest)
library(leaps)
library(ggplot2)
library(broom)
library(AER)
library(MASS)
library(rsq)
library(gridExtra)
library(spgwr)
library(spatialreg)
library(geojsonio)
final_data <- st_read('output/그리드 전처리 완료/analysis4_dataset_0524.geojson')
library(car)
library(corrplot)
library(lmtest)
library(sf)
library(tmap)
library(dplyr)
library(sp)
library(sf)
library(RANN)
library(spdep)
library(rgdal)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(gvlma)
library(car)
library(tidyr)
library(lmtest)
library(leaps)
library(ggplot2)
library(broom)
library(AER)
library(MASS)
library(rsq)
library(gridExtra)
library(spgwr)
library(spatialreg)
library(geojsonio)
final_data <- st_read('output/그리드 전처리 완료/analysis4_dataset_0524.geojson')
